import type { FSStat, Stats as IFileStat } from 'node-fuse-bindings'
import { counter } from '../../utils/counter'
import { IllegalOperationOnDirectoryError, NotADirectoryError } from '../../utils/errors'
import type { FileSystemAdapter } from '../FileSystemAdapter'
import { Directory } from './structs/Directory'
import { File } from './structs/File'

const incInoSeq = counter(1000000).next
const incFdSeq = counter(4).next
const rootDirectory = new Directory(incInoSeq(), '/')
for (let i = 1; i <= 3; i++) {
    const file = new File(incInoSeq(), `file${i}.txt`, rootDirectory)
    const date = new Date()
    const time = date.toLocaleString('sv-SE') + '.' + date.getMilliseconds().toString().padStart(3, '0')
    file.buffer = Buffer.from(`This test file was generated by the TestFileSystemAdapter.

Original file name: ${file.name}

Generation time: ${time}
`)
    rootDirectory.files.set(file.name, file)
}

/**
 * TestFileSystemAdapter is a mock implementation of the FileSystemAdapter interface. It provides
 * basic methods to interact with a simulated file system, such as reading directory contents,
 * accessing file attributes, and reading file data. This class is primarily used for testing and
 * development purposes.
 */
export class TestFileSystemAdapter implements FileSystemAdapter {
    async getattr(path: string): Promise<IFileStat> {
        return rootDirectory.find(path).stat
    }

    async open(path: string, flags: number): Promise<number> {
        const file = rootDirectory.find(path)
        if (file instanceof Directory) {
            throw new IllegalOperationOnDirectoryError(path)
        }
        return incFdSeq()
    }

    async read(path: string, fd: number, buffer: Buffer, length: number, position: number): Promise<number> {
        const file = rootDirectory.find(path)
        if (file instanceof Directory) {
            throw new IllegalOperationOnDirectoryError(path)
        }
        return file.buffer.copy(buffer, 0, position, position + length)
    }

    async readdir(path: string): Promise<string[]> {
        const directory = rootDirectory.find(path)
        if (directory instanceof File) {
            throw new NotADirectoryError(path)
        }
        return directory.listFiles()
    }

    async statfs(path: string): Promise<FSStat> {
        return {
            bavail: 500000, // Free blocks available to root
            bfree: 500000, // Free blocks available for unprivileged users
            blocks: 1000000, // Total number of blocks
            bsize: 4096, // File system block size
            favail: 50000, // Free inodes available to root
            ffree: 50000, // Free file inodes
            files: 100000, // Total number of file inodes
            flag: 0, // Mount flags
            frsize: 4096, // Fragment size
            fsid: 123456, // File system ID
            namemax: 255, // Maximum filename length
        }
    }
}
